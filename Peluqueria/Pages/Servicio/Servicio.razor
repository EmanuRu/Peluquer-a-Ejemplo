@page "/Servicio"
@using Peluqueria.Aplicacion.Data.ModelsDTO
@using System.Text.Json
@using Peluqueria.Pages.Servicio
@using System.Text

<h1 class="mb-4 text-center text-primary">Servicio</h1>

<div class="container">
    <div class="row">
        <div class="row g-3">
            <div class="col-md-6">
                <div class="card shadow-sm mb-3">
                    <div class="card-body">
                        <!--formulario para agregar un servicio-->
                        <h4 class="card-title">Agregar Servicio</h4>
                        <EditForm Model="nuevo" OnValidSubmit="AgregarServicio">
                            <DataAnnotationsValidator />
                            <div>
                                <label for="SNuevNom" class="form-label">Nombre</label>
                                <InputText id="SNuevNom" @bind-Value="nuevo.Nombre" class="form-control mb-3">PlaceholderContext="Nombre"</InputText>
                                <ValidationMessage For="@(() => nuevo.Nombre)" />
                            </div>
                            <div>
                                <label for="SNuevDesc" class="form-label">Descripcion</label>
                                <InputText id="SNuevDesc" @bind-Value="nuevo.Descripcion" class="form-control mb-3">PlaceholderContext="Descripcion"</InputText>
                            </div>
                            <div>
                                <label for="SNuevDuracionMinutos" class="form-label">Duracion</label>
                                <InputNumber id="SNuevDuracionMinutos" @bind-Value="nuevo.DuracionMinutos" class="form-control mb-3"></InputNumber>
                                <ValidationMessage For="@(() => nuevo.DuracionMinutos)" />
                            </div>
                            <input id="Submit1" type="submit" value="Agregar" class="btn btn-primary" />
                        </EditForm>
                        <!--mensjaes de error o exito-->
                        @if (!string.IsNullOrEmpty(errorPost))
                        {
                            <div class="alert alert-warning mt-2">@errorPost</div>
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card shadow-sm mb-3">
                    <div class="card-body">
                        <!--formulario para editar el servicio-->
                        <h4 class="card-title">Editar Servicio</h4>
                        <EditForm Model="editado" OnValidSubmit="Editar">
                            <DataAnnotationsValidator />
                            <div>
                                <input type="hidden" @bind="editado.IdServicio" />
                                <label for="SEditNom" class="form-label">Nombre</label>
                                <InputText id="SEditNom" @bind-Value="editado.Nombre" class="form-control mb-3">PlaceholderContext="Nombre"</InputText>
                                <ValidationMessage For="@(() => nuevo.Nombre)" />
                            </div>
                            <div>
                                <label for="SEditDesc" class="form-label">Descripcion</label>
                                <InputText id="SEditDesc" @bind-Value="editado.Descripcion" class="form-control mb-3">PlaceholderContext="Descripcion"</InputText>
                            </div>
                            <div>
                                <label for="SEditDur" class="form-label">Duracion</label>
                                <InputNumber id="SEditDur" @bind-Value="editado.DuracionMinutos" class="form-control mb-3"></InputNumber>
                                <ValidationMessage For="@(() => nuevo.DuracionMinutos)" />
                            </div>
                            <input type="submit" value="Editar" class="btn btn-warning" />
                            @if (!string.IsNullOrEmpty(errorPut))
                            {
                                <div class="alert alert-warning mt-2">@errorPut</div>
                            }
                        </EditForm>

                    </div>
                </div>
            </div>
        </div>
        <div class="row-md-6">
            <div class="card shadow-sm mb-3">
                <div class="card-body">
                    <!--formulario para buscar un servicio-->
                    <h4 class="card-title">Buscar Servicios</h4>
                    <EditForm Model="busc">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="input-group">
                            <input type="text" @bind-value="busc.nombre" class="form-control col-sm-3" />
                            <input type="button" value="Buscar" @onclick="() => Buscar()" class="btn btn-outline-primary" />
                        </div>
                    </EditForm>
                    @if (!string.IsNullOrEmpty(errorGetId))
                    {
                        <div class="alert alert-warning mt-2">@errorGetId</div>
                    }
                </div>
            </div>
            <div class="card shadow-sm">
                <div class="card-body">
                    <div class="table-responsive shadow-sm" style="max-height: 600px;">
                        <!--tabla de servicios, en caso de estar vacia se muestra un mensaje-->
                        @if (!string.IsNullOrEmpty(errorGet))
                        {
                            <div class="alert alert-warning mt-2">@errorGet</div>
                        }
                        else

                        {
                            <table class="table table-striped table-hover mb-0">
                                <thead class="table-dark" style="position: sticky; top: 0; z-index: 1;">
                                    <tr>
                                        <td>
                                            Id
                                        </td>
                                        <td>
                                            Nombre
                                        </td>
                                        <td>
                                            Descripcion
                                        </td>
                                        <td>
                                            Duracion
                                        </td>
                                        <th colspan="2">Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Lista)
                                    {
                                        <tr>
                                            <td>@item.IdServicio</td>
                                            <td>@item.Nombre</td>
                                            <td>@item.Descripcion</td>
                                            <td>@item.DuracionMinutos</td>
                                            <td><input type="button" name="name" value="Editar" class="btn btn-sm btn-warning" @onclick="() => SeleccionarEditar(item)" /></td>
                                            <td><input type="button" name="name" value="Eliminar" class="btn btn-sm btn-danger" @onclick="() => Borrar(item)" /></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        @if (!string.IsNullOrEmpty(errorDelete))
                        {
                            <div class="text-info"><b>@errorDelete</b></div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<ServicioDTO> Lista = new List<ServicioDTO>();
    private string errorGet, errorGetId, errorPut, errorDelete, errorPost;//mensajes de error o exito 
    private ServicioBuscar busc = new ServicioBuscar();
    private ServicioDTO nuevo = new ServicioDTO();
    private ServicioDTO editado = new ServicioDTO();

    [Inject]
    protected IHttpClientFactory Http { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Listar();
    }

    //metodo para listar los servicios
    private async Task Listar()
    {
        var httpClient = Http.CreateClient("PeluqueriaAPI");
        using HttpResponseMessage respuesta = await httpClient.GetAsync("api/Servicio");//comunicacion con ServicioController

        if (respuesta.IsSuccessStatusCode)//se lista los servicios de la consulta exitosa
        {
            using var contenido = await respuesta.Content.ReadAsStreamAsync();
            Lista = await JsonSerializer.DeserializeAsync<List<ServicioDTO>>(contenido,
            new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            errorGet = "";
        }
        else if (respuesta.StatusCode == System.Net.HttpStatusCode.NotFound)//mensajes de error
        {
            errorGet = "No hay elementos en la lista";
        }
        else if (respuesta.StatusCode == System.Net.HttpStatusCode.InternalServerError)
        {
            errorGet = await respuesta.Content.ReadAsStringAsync();
            Console.WriteLine(errorGet);
        }
    }

    //metodo para buscar una servicio, se puede buscar por id o nombre
    private async Task Buscar()
    {
        if (busc.nombre != "")
        {

            if (int.TryParse(busc.nombre, out int id))
            {
                var httpClient = Http.CreateClient("PeluqueriaAPI");
                using HttpResponseMessage respuesta = await httpClient.GetAsync($"api/Servicio/id?id={id}");//se envia el id de servicio a ServicioController

                if (respuesta.IsSuccessStatusCode)//se muestra el servicio
                {
                    using var contenido = await respuesta.Content.ReadAsStreamAsync();
                    var cli = await JsonSerializer.DeserializeAsync<ServicioDTO>(contenido,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    List<ServicioDTO> b = new List<ServicioDTO>();
                    b.Add(cli);
                    Lista = b;
                    errorGetId = "";
                }
                else if (respuesta.StatusCode == System.Net.HttpStatusCode.NotFound)//mensajes de error
                {
                    errorGetId = "No Se encontro el servicio";
                }
                else if (respuesta.StatusCode == System.Net.HttpStatusCode.InternalServerError)
                {
                    errorGetId = await respuesta.Content.ReadAsStringAsync();
                    
                }
            }
            else
            {

                var httpClient = Http.CreateClient("PeluqueriaAPI");
                using HttpResponseMessage respuesta = await httpClient.GetAsync($"api/Servicio/nombre?nombre={busc.nombre}");//se envia el nombre
                if (respuesta.IsSuccessStatusCode)//se muestra el servicio
                {
                    using var contenido = await respuesta.Content.ReadAsStreamAsync();
                    var cli = await JsonSerializer.DeserializeAsync<ServicioDTO>(contenido,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    List<ServicioDTO> b = new List<ServicioDTO>();
                    b.Add(cli);
                    Lista = b;
                    errorGetId = "";
                }
                else if (respuesta.StatusCode == System.Net.HttpStatusCode.NotFound)//mensajes de error
                {
                    errorGetId = "No Se encontro el servicio";
                }
                else if (respuesta.StatusCode == System.Net.HttpStatusCode.InternalServerError)
                {
                    errorGetId = await respuesta.Content.ReadAsStringAsync();
                    Console.WriteLine(errorGet);
                }
            }
            _ = Task.Run(async () =>//los mensajes desaparecen en ocho segundos
            {
                await Task.Delay(8000);
                errorGetId = "";
                await InvokeAsync(StateHasChanged);
            });
        }
        else { await Listar(); }
    }

    //metodo para agregar un nuevo servicio
    private async Task AgregarServicio()
    {
        var nuevojson = new StringContent(JsonSerializer.Serialize(nuevo),//se serializa el objeto nuevo
        Encoding.UTF8,
        "application/json");

        var httpcli = Http.CreateClient("PeluqueriaAPI");
        using var respuesta = await httpcli.PostAsync("api/Servicio/", nuevojson);//se lo envia a ServicioCOntroller


        if (respuesta.IsSuccessStatusCode)//se listan los servicios
        {
            await Listar();

            nuevo = await respuesta.Content.ReadFromJsonAsync<ServicioDTO>();
            if (nuevo == null)
            {
                errorPost = $"Ocurrió un error al mostrar los datos del servicio agregado";
            }
            else
            {
                errorPost = $"Se agrego el servicio {nuevo.Nombre}";
            }
            nuevo = new ServicioDTO();
        }
        else if (respuesta.StatusCode == System.Net.HttpStatusCode.NotFound)//mensajes de error
        {
            await Listar();
            nuevo = new ServicioDTO();
            errorPost = $"Ocurrió un error al agregar el Servicio";
        }
        else
        {
            await Listar();
            nuevo = new ServicioDTO();
            errorPost = await respuesta.Content.ReadAsStringAsync();
        }

        _ = Task.Run(async () =>
        {
            await Task.Delay(8000);
            errorPost = "";
            await InvokeAsync(StateHasChanged);
        });
    }

    private void SeleccionarEditar(ServicioDTO s)//al seleccioanr un servicio para editar sus datos se agregan en el objeto editado
    {
        editado.IdServicio = s.IdServicio;
        editado.Nombre = s.Nombre;
        editado.Descripcion = s.Descripcion;
        editado.DuracionMinutos = s.DuracionMinutos;
    }

    //metodo para editar un servicios
    private async Task Editar()
    {
        //se serializa el objeto editar
        var editadojson = new StringContent(JsonSerializer.Serialize(editado), Encoding.UTF8, "application/json");
        var httpcli = Http.CreateClient("PeluqueriaAPI");
        using var respuesta = await httpcli.PutAsync($"/api/Servicio/", editadojson);//se envia editar a ServicioController

        if (respuesta.IsSuccessStatusCode)//se listan los servicios
        {
            editado = new ServicioDTO();
            await Listar();
            var resultadoSerializado = await respuesta.Content.ReadAsStringAsync();
            ServicioDTO c = JsonSerializer.Deserialize<ServicioDTO>(resultadoSerializado);
            errorPut = $"Se edito el Servicio {c.Nombre}";
        }
        else if (respuesta.StatusCode == System.Net.HttpStatusCode.NotFound)//mensajes de error
        {
            editado = new ServicioDTO();
            errorPut = "No fue posible editar el Servicio seleccionado";
        }
        else
        {
            editado = new ServicioDTO();
            errorPut = await respuesta.Content.ReadAsStringAsync();

        }

        _ = Task.Run(async () =>
        {
            await Task.Delay(8000);
            errorPut = "";
            await InvokeAsync(StateHasChanged);
        });
    }

    //metodo para borrar un servicio
    private async Task Borrar(ServicioDTO c)
    {
        var httpclient = Http.CreateClient("PeluqueriaAPI");
        using var respuesta = await httpclient.DeleteAsync($"/api/Servicio/{c.IdServicio}");//se envia el id del servicio a ServicioController
        if (respuesta.IsSuccessStatusCode)//se lista los servicios
        {
            await Listar();
            errorDelete = $"Se elimino el Servicio {c.Nombre}";

        }
        else if (respuesta.StatusCode == System.Net.HttpStatusCode.NotFound)//mensajes de error
        {
            errorDelete = await respuesta.Content.ReadAsStringAsync();
        }
        else
        {
            errorDelete = await respuesta.Content.ReadAsStringAsync();
        }

        _ = Task.Run(async () =>
        {
            await Task.Delay(8000);
            errorDelete = "";
            await InvokeAsync(StateHasChanged);
        });
    }
}
