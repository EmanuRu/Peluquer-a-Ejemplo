@page "/Profesional"
@using Peluqueria.Aplicacion.Data.ModelsDTO
@using System.Text.Json
@using Peluqueria.Pages.Profesional
@using System.Text
<h1 class="mb-4 text-center text-primary">Profesionales</h1>
<div class="container">
    <div class="row">
        <div class="row g-6">
            <div class="col-md-6">
                <div class="card shadow-sm mb-3">
                    <div class="card-body">
                        <!--formulario para agregar un profesioanl-->
                        <h4 class="card-title">Agregar Profesional</h4>
                        <EditForm Model="nuevo" OnValidSubmit=" AgregarProfesional">
                            <DataAnnotationsValidator />
                            <div>
                                <label for="PNuevNom" class="form-label">Nombre</label>
                                <InputText id="PNuevNom" @bind-Value="nuevo.Nombre" class="form-control">PlaceholderContext="Nombre"</InputText>
                                <ValidationMessage For="@(() => nuevo.Nombre)" />
                            </div>
                            <div>
                                <label for="PNuevApe" class="form-label">Apellido</label>
                                <InputText id="PNuevApe" @bind-Value="nuevo.Apellido" class="form-control">PlaceholderContext="Apellido"</InputText>
                                <ValidationMessage For="@(() => nuevo.Apellido)" />
                            </div>
                            <div>
                                <label for="PNuevEsp" class="form-label">Especialidad</label>
                                <InputText id="PNuevEsp" @bind-Value="nuevo.Especialidad" class="form-control">PlaceholderContext="Especialidad"</InputText>
                            </div>
                            <div>
                                <label for="PNuevTel" class="form-label">telefono</label>
                                <InputText id="PNuevTel" @bind-Value="nuevo.Telefono" class="form-control mb-3"></InputText>
                                <ValidationMessage For="@(() => nuevo.Telefono)" />
                            </div>
                            <input id="Submit1" type="submit" value="Agregar" class="btn btn-primary" />
                        </EditForm>
                        <!--distintos mensajes de exito o error-->
                        @if (!string.IsNullOrEmpty(errorPost))
                        {
                            <div class="alert alert-warning mt-2">@errorPost</div>
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card shadow-sm mb-3">
                    <div class="card-body">
                        <!--formulario para editar el profesional-->
                        <h4 class="card-title">Editar Profesional</h4>
                        <EditForm Model="editado" OnValidSubmit="Editar">
                            <DataAnnotationsValidator />
                            <div>
                                <input type="hidden" @bind="editado.IdProfesional" />
                                <label for="PEditNom" class="form-label">Nombre</label>
                                <InputText id="PEditNom" @bind-Value="editado.Nombre" class="form-control">PlaceholderContext="Nombre"</InputText>
                                <ValidationMessage For="@(() => editado.Nombre)" />
                            </div>
                            <div>
                                <label for="PEditApe" class="form-label">Apellido</label>
                                <InputText id="PEditApe" @bind-Value="editado.Apellido" class="form-control">PlaceholderContext="Apellido"</InputText>
                                <ValidationMessage For="@(() => editado.Apellido)" />
                            </div>
                            <div>
                                <label for="PEditEsp" class="form-label">Especialidad</label>
                                <InputText id="PEditEsp" @bind-Value="editado.Especialidad" class="form-control">PlaceholderContext="Especialidad"</InputText>
                            </div>
                            <div>
                                <label for="PEditTel" class="form-label">Telefono</label>
                                <InputText id="PEditTel" @bind-Value="editado.Telefono"  class="form-control mb-3">PlaceholderContext="Telefono"</InputText>
                                <ValidationMessage For="@(() => editado.Telefono)" />
                            </div>
                            <input type="submit" value="Editar" class="btn btn-warning" />
                            @if (!string.IsNullOrEmpty(errorPut))
                            {
                                <div class="alert alert-warning mt-2">@errorPut</div>
                            }
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
        <div class="row g-6">
            <div class="card shadow-sm mb-3">
                <div class="card-body">
                    <!--formulario para buscar un profesional-->
                    <h4 class="card-title">Buscar profesional</h4>
                    <EditForm Model="busc">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="input-group">
                            <input type="text" @bind-value="busc.nombre" class="form-control col-sm-3" />
                            <input type="button" value="Buscar" @onclick="() => Buscar()" class="btn btn-outline-primary" />
                        </div>

                    </EditForm>
                    @if (!string.IsNullOrEmpty(errorGetId))
                    {
                        <div class="alert alert-warning mt-2">@errorGetId</div>
                    }
                </div>
            </div>
            <div class="card shadow-sm">
                <div class="card-body">
                    <!--tabla de profecionales, en caso de estar vacia se muestra un mensaje-->
                    <div class="table-responsive shadow-sm" style="max-height: 600px;">
                        @if (!string.IsNullOrEmpty(errorGet))
                        {
                            <div class="alert alert-warning mt-2">@errorGet</div>
                        }
                        else

                        {
                            <table class="table table-striped table-hover mb-0">
                                <thead class="table-dark" style="position: sticky; top: 0; z-index: 1;">
                                    <tr>
                                        <td>
                                            Id
                                        </td>
                                        <td>
                                            Nombre
                                        </td>
                                        <td>
                                            Apellido
                                        </td>
                                        <td>
                                            Especialidad
                                        </td>
                                        <td>
                                            Telefono
                                        </td>
                                        <th colspan="2">Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Lista)
                                    {
                                        <tr>
                                            <td>@item.IdProfesional</td>
                                            <td>@item.Nombre</td>
                                            <td>@item.Apellido</td>
                                            <td>@item.Especialidad</td>
                                            <td>@item.Telefono</td>
                                            <td><input type="button" name="name" value="Editar" class="btn btn-sm btn-warning" @onclick="() => SeleccionarEditar(item)" /></td>
                                            <td><input type="button" name="name" value="Eliminar" class="btn btn-sm btn-danger" @onclick="() => Borrar(item)" /></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        @if (!string.IsNullOrEmpty(errorDelete))
                        {
                            <div class="text-info"><b>@errorDelete</b></div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<ProfesionalDTO> Lista = new List<ProfesionalDTO>();
    private List<ReservaDTO> ListaReserva = new List<ReservaDTO>();
    private string errorGet, errorGetId, errorPut, errorDelete, errorPost, errorGetReserva;//mensajes de error o exito
    private ProfesionalBuscar busc = new ProfesionalBuscar();
    private ProfesionalDTO nuevo = new ProfesionalDTO();
    private ProfesionalDTO editado = new ProfesionalDTO();

    [Inject]
    protected IHttpClientFactory Http { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Listar();
    }

    //metodo para listar a los profesionaels
    private async Task Listar()
    {
        var httpClient = Http.CreateClient("PeluqueriaAPI");
        using HttpResponseMessage respuesta = await httpClient.GetAsync("api/Profesional");//comunicacion con ProfesionalController

        if (respuesta.IsSuccessStatusCode)//se listan los profesionales en caso de que la consulta sea exitosa
        {
            using var contenido = await respuesta.Content.ReadAsStreamAsync();
            Lista = await JsonSerializer.DeserializeAsync<List<ProfesionalDTO>>(contenido,
                new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            errorGet = "";
        }
        else if (respuesta.StatusCode == System.Net.HttpStatusCode.NotFound)//mensajes de error
        {
            errorGet = "No hay elementos en la lista";
        }
        else if (respuesta.StatusCode == System.Net.HttpStatusCode.InternalServerError)
        {
            errorGet = await respuesta.Content.ReadAsStringAsync();
            Console.WriteLine(errorGet);
        }
    }

    //metodo para buscar un rofesional, se puede buscar por nombre o id
    private async Task Buscar()
    {
        if (busc.nombre != "")
        {

            if (int.TryParse(busc.nombre, out int id))
            {
                var httpClient = Http.CreateClient("PeluqueriaAPI");
                using HttpResponseMessage respuesta = await httpClient.GetAsync($"api/Profesional/id?id={id}");//se envia el id a Controller

                if (respuesta.IsSuccessStatusCode)//se muestra el profesional en caso de consulta exitosa
                {
                    using var contenido = await respuesta.Content.ReadAsStreamAsync();
                    var prof = await JsonSerializer.DeserializeAsync<ProfesionalDTO>(contenido,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    List<ProfesionalDTO> b = new List<ProfesionalDTO>();
                    b.Add(prof);
                    Lista = b;
                    errorGetId = "";
                }
                else if (respuesta.StatusCode == System.Net.HttpStatusCode.NotFound)//mensajes de error
                {
                    errorGetId = "No se encontro el profesional";
                }
                else if (respuesta.StatusCode == System.Net.HttpStatusCode.InternalServerError)
                {
                    errorGetId = await respuesta.Content.ReadAsStringAsync();
                    Console.WriteLine(errorGetId);
                }
            }
            else
            {

                var httpClient = Http.CreateClient("PeluqueriaAPI");
                using HttpResponseMessage respuesta = await httpClient.GetAsync($"api/Profesional/nombre?nombre={busc.nombre}");//se envia el nombre a controller
                if (respuesta.IsSuccessStatusCode)//se muestra el profesional en caso de consulta exitosa
                {
                    using var contenido = await respuesta.Content.ReadAsStreamAsync();
                    var prof = await JsonSerializer.DeserializeAsync<ProfesionalDTO>(contenido,
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    List<ProfesionalDTO> b = new List<ProfesionalDTO>();
                    b.Add(prof);
                    Lista = b;
                    errorGetId = "";
                }
                else if (respuesta.StatusCode == System.Net.HttpStatusCode.NotFound)//mensaje de error
                {
                    errorGetId = "No se encontro el profesional";
                }
                else if (respuesta.StatusCode == System.Net.HttpStatusCode.InternalServerError)
                {
                    errorGetId = await respuesta.Content.ReadAsStringAsync();
                    Console.WriteLine(errorGetId);
                }
            }
            _ = Task.Run(async () =>//los mensajes desaparecen en ocho segundos
            {
                await Task.Delay(8000);
                errorGetId = "";
                await InvokeAsync(StateHasChanged);
            });
        }
        else { await Listar(); }
    }

    //metodo para agregar un profesional
    private async Task AgregarProfesional()
    {
        var nuevojson = new StringContent(JsonSerializer.Serialize(nuevo),//se serializa el profesional
        Encoding.UTF8,
        "application/json");

        var httpcli = Http.CreateClient("PeluqueriaAPI");
        using var respuesta = await httpcli.PostAsync("api/Profesional/", nuevojson);//se envia el profesional a Controller


        if (respuesta.IsSuccessStatusCode)//mensaje de exito y se lista los profesionales
        {
            await Listar();
            nuevo = await respuesta.Content.ReadFromJsonAsync<ProfesionalDTO>();
            if (nuevo == null)
            {
                errorPost = $"Ocurrió un error al mostrar los datos del profesional agregado";
            }
            else
            {
                errorPost = $"Se agrego el profesional {nuevo.Nombre} {nuevo.Apellido}";
            }
            nuevo = new ProfesionalDTO();
        }
        else if (respuesta.StatusCode == System.Net.HttpStatusCode.NotFound)//mensajes de error
        {
            await Listar();
            nuevo = new ProfesionalDTO();
            errorPost = $"Ocurrió un error al agregar el Profesional";
        }
        else
        {
            await Listar();
            nuevo = new ProfesionalDTO();
            errorPost = await respuesta.Content.ReadAsStringAsync();
        }

        _ = Task.Run(async () =>
        {
            await Task.Delay(8000);
            errorPost = "";
            await InvokeAsync(StateHasChanged);
        });
    }

    //al seleccioanr un profesional para editar sus datos se agregan en el objeto editado
    private void SeleccionarEditar(ProfesionalDTO p)
    {
        editado.IdProfesional = p.IdProfesional;
        editado.Nombre = p.Nombre;
        editado.Apellido = p.Apellido;
        editado.Especialidad = p.Especialidad;
        editado.Telefono = p.Telefono;
    }

    //metodo para editar un profesional
    private async Task Editar()
    {
        //se serializa editado
        var editadojson = new StringContent(JsonSerializer.Serialize(editado), Encoding.UTF8, "application/json");
        var httpcli = Http.CreateClient("PeluqueriaAPI");
        using var respuesta = await httpcli.PutAsync($"/api/Profesional/", editadojson);//editado serializado se enva controler

        if (respuesta.IsSuccessStatusCode)//mensaje de exito y se listan los profesionales
        {
            editado = new ProfesionalDTO();
            await Listar();
            var resultadoSerializado = await respuesta.Content.ReadAsStringAsync();
            ProfesionalDTO p = JsonSerializer.Deserialize<ProfesionalDTO>(resultadoSerializado);
            errorPut = $"Se edito el Profesional {p.Nombre} {p.Apellido}";
        }
        else if (respuesta.StatusCode == System.Net.HttpStatusCode.NotFound)//mensaje de error
        {
            editado = new ProfesionalDTO();
            errorPut = "No fue posible editar el Profesional seleccionado";
        }
        else
        {
            editado = new ProfesionalDTO();
            errorPut = await respuesta.Content.ReadAsStringAsync();

        }

        _ = Task.Run(async () =>
        {
            await Task.Delay(8000);
            errorPut = "";
            await InvokeAsync(StateHasChanged);
        });
    }

    //metodo para borrar un profesional
    private async Task Borrar(ProfesionalDTO p)
    {
        var httpclient = Http.CreateClient("PeluqueriaAPI");
        using var respuesta = await httpclient.DeleteAsync($"/api/Profesional/{p.IdProfesional}");//se envia el id a Controller
        if (respuesta.IsSuccessStatusCode)//mensaje de exito y se listan los prfesionales
        {
            await Listar();
            errorDelete = $"Se elimino el Profesional {p.Nombre} {p.Apellido}";

        }
        else if (respuesta.StatusCode == System.Net.HttpStatusCode.NotFound)//menajes de error
        {
            errorDelete = await respuesta.Content.ReadAsStringAsync();
        }
        else
        {
            errorDelete = await respuesta.Content.ReadAsStringAsync();
        }

        _ = Task.Run(async () =>
        {
            await Task.Delay(8000);
            errorDelete = "";
            await InvokeAsync(StateHasChanged);
        });
    }
}